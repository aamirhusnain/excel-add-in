{"version":3,"file":"functions.js","mappings":"AAoNAA,gBAAgBC,UAAU,YAtM1B,SAAkBC,EAAuBC,EAAkBC,EAA2BC,GAGpF,IADoBC,aAAaC,QAAQ,SAEvC,MAAO,iBAIT,IAAMC,EAAU,CACdC,UAAWP,EACXQ,MAAOP,EACPQ,aAAcP,EACdQ,UAAWP,EAAaQ,KAAKC,KAAUC,KAAK,KAC5CC,SAAU,eACVC,WAAY,iBAKd,OAHAC,QAAQC,IAAI,UAAUX,GAEPY,QAAQ,WAAYZ,EASrC,IA4KAR,gBAAgBC,UAAU,WAlK1B,SAAiBoB,EAAsBC,GAGrC,IADoBhB,aAAaC,QAAQ,SAEvC,MAAO,iBAIT,IAAMC,EAAU,CACdE,MAAOW,EACPE,QAASD,EACTN,SAAU,eACVC,WAAY,gBAGd,IAEE,OADeG,QAAQ,UAAWZ,EAGpC,CAAE,MAAOgB,GACP,MAAO,iBACT,CACF,IA6IAxB,gBAAgBC,UAAU,aAnI1B,SAAmBwB,EAA2BC,GAG5C,IADoBpB,aAAaC,QAAQ,SAEvC,MAAO,iBAIT,IAAMC,EAAU,CACdE,MAAOe,EACPE,UAAWD,EAAQb,KAAKC,KAAUC,KAAK,KACvCC,SAAU,eACVC,WAAY,kBAGd,IAEE,OADeG,QAAQ,YAAaZ,EAEtC,CAAE,MAAOgB,GACP,MAAO,iBACT,CACF,IA+GAxB,gBAAgBC,UAAU,QArG1B,SAAc2B,EAAkBC,GAG9B,IADoBvB,aAAaC,QAAQ,SAEvC,MAAO,iBAIT,IAAMC,EAAU,CACdE,MAAOkB,EACPE,KAAMD,EAAahB,KAAKC,KAAUC,KAAK,KACvCC,SAAU,eACVC,WAAY,iBAGd,IAEE,OADeG,QAAQ,OAAQZ,EAEjC,CAAE,MAAOgB,GACP,MAAO,iBACT,CACF,IAiFAxB,gBAAgBC,UAAU,YAxE1B,SAAkB8B,GAGhB,IADoBzB,aAAaC,QAAQ,SAEvC,MAAO,iBAIT,IAAMC,EAAU,CACdE,MAAOqB,EAAelB,KAAKC,KAAUC,KAAK,KAC1CC,SAAU,eACVC,WAAY,iBAGd,IAEE,OADeG,QAAQ,WAAYZ,EAErC,CAAE,MAAOgB,GACP,MAAO,iBACT,CACF,IAqDAxB,gBAAgBC,UAAU,SA1C1B,SAAe+B,EAAgBC,EAAiBC,GAG9C,IADoB5B,aAAaC,QAAQ,SAEvC,MAAO,iBAGT,GAAIyB,EAAeG,QAAUF,EAAgBE,OAC3C,MAAO,2DAIT,IAAIC,EAAc,GAClB,IAAK,IAAIC,KAAKL,EAAgB,CAC5B,IAAMM,EAAYN,EAAeK,GAC3BE,EAAaN,EAAgBI,GACnCD,EAAYI,KAAKF,EAAY,KAAOC,EACtC,CAKA,IAAM/B,EAAU,CACdE,MAAOwB,EACP,iBALFE,EAAcA,EAAYrB,KAAK,OAM7BC,SAAU,eACVC,WAAY,cAGd,IAEE,OADeG,QAAQ,QAASZ,EAElC,CAAE,MAAOgB,GACP,MAAO,iBACT,CACF","sources":["webpack://excel-custom-functions-js/./src/functions/functions.js"],"sourcesContent":["/* global console */\n\nconst BASE_URL = \"https://formulabot.com/api/1.1/wf/\";\n\n/**\n * =FORMULABOT_CLASSIFY(cell_to_classify, option1, option2,...)\n * Ex:=FORMULABOT_CLASSIFY(F1,\"fruit\",\"veggie\")\n * @customfunction\n * @param {string} cell_to_classify_type Input String\n * @param {string} cell_to_classify Input String\n * @param {string} cell_to_classify_based_on Input String\n * @param {string[][][]} list_options Multiple ranges of values.\n * @returns {string} The Formulabot result\n */\nfunction CLASSIFY(cell_to_classify_type, cell_to_classify, cell_to_classify_based_on, list_options) {\n  // check if user is active\n  const activeState = localStorage.getItem(\"token\");\n  if (!activeState) {\n    return \"Please log in.\";\n  }\n\n  // call API\n  const payload = {\n    inputType: cell_to_classify_type,\n    input: cell_to_classify,\n    groupingType: cell_to_classify_based_on,\n    groupings: list_options.flat(Infinity).join(\",\"),\n    platform: \"Excel Add-in\",\n    outputType: \"Classify - FF\",\n  };\n  console.log('payload',payload)\n\n  const result = callAPI(\"classify\", payload);\n  return result;\n  /*\n  try {\n    const result = callAPI(\"classify\", payload);\n    return result;\n  } catch (e) {\n    return \"No result found\";\n  }*/\n}\n\n/**\n * =FORMULABOT_EXTRACT(cell_to_extract_info, info_to_extract)\n * Ex: =FORMULABOT_EXTRACT(F1,\"company name\")\n * @customfunction\n * @param {string} cell_to_extract_info Input String\n * @param {string} info_to_extract Input String\n * @returns {string} The Formulabot result\n */\nfunction EXTRACT(cell_to_extract_info, info_to_extract) {\n  // check if user is active\n  const activeState = localStorage.getItem(\"token\");\n  if (!activeState) {\n    return \"Please log in.\";\n  }\n\n  // call API\n  const payload = {\n    input: cell_to_extract_info,\n    extract: info_to_extract,\n    platform: \"Excel Add-in\",\n    outputType: \"Extract - FF\",\n  };\n\n  try {\n    const result = callAPI(\"extract\", payload);\n    return result;\n    //return JSON.stringify(payload);\n  } catch (e) {\n    return \"No result found\";\n  }\n}\n\n/**\n * =FORMULABOT_SENTIMENT(cell_to_analyze_sentiment, option1, option2,...)\n * Ex: =FORMULABOT_SENTIMENT(F1,\"positive\",\"negative\",\"neutral\")\n * @customfunction\n * @param {string} cell_to_analyze_sentiment Input String\n * @param {string[][][]} options Multiple ranges of values.\n * @returns {string} The Formulabot result\n */\nfunction SENTIMENT(cell_to_analyze_sentiment, options) {\n  // check if user is active\n  const activeState = localStorage.getItem(\"token\");\n  if (!activeState) {\n    return \"Please log in.\";\n  }\n\n  // call API\n  const payload = {\n    input: cell_to_analyze_sentiment,\n    sentiment: options.flat(Infinity).join(\",\"),\n    platform: \"Excel Add-in\",\n    outputType: \"Sentiment - FF\",\n  };\n\n  try {\n    const result = callAPI(\"sentiment\", payload);\n    return result;\n  } catch (e) {\n    return \"No result found\";\n  }\n}\n\n/**\n * =FORMULABOT_INFO(cell_to_get_info, info_request)\n * Ex: =FORMULABOT_INFO(F1,\"tallest building\")\n * @customfunction\n * @param {string} cell_to_get_info Input String\n * @param {string[][][]} info_request Multiple ranges of values.\n * @returns {string} The Formulabot result\n */\nfunction INFO(cell_to_get_info, info_request) {\n  // check if user is active\n  const activeState = localStorage.getItem(\"token\");\n  if (!activeState) {\n    return \"Please log in.\";\n  }\n\n  // call API\n  const payload = {\n    input: cell_to_get_info,\n    info: info_request.flat(Infinity).join(\" \"),\n    platform: \"Excel Add-in\",\n    outputType: \"Get Info - FF\",\n  };\n\n  try {\n    const result = callAPI(\"info\", payload);\n    return result;\n  } catch (e) {\n    return \"No result found\";\n  }\n}\n\n/**\n * =FORMULABOT_FREEFORM(input_any_info)\n * Ex: =FORMULABOT_FREEFORM( “Write me a thank you note to ”, B10 ,“for gifting me a”, C10)\n * @customfunction\n * @param {string[][][]} input_any_info Multiple ranges of values.\n * @returns {string} The Formulabot result\n */\nfunction FREEFORM(input_any_info) {\n  // check if user is active\n  const activeState = localStorage.getItem(\"token\");\n  if (!activeState) {\n    return \"Please log in.\";\n  }\n\n  // call API\n  const payload = {\n    input: input_any_info.flat(Infinity).join(\" \"),\n    platform: \"Excel Add-in\",\n    outputType: \"Freeform - FF\",\n  };\n\n  try {\n    const result = callAPI(\"freeform\", payload);\n    return result;\n  } catch (e) {\n    return \"No result found\";\n  }\n}\n\n/**\n * =FORMULABOT_INFER(input_examples, output_examples, input_to_predict)\n * Ex: =FORMULABOT_INFER(A1:A5,B1:B5,A6)\n * @customfunction\n * @param {string} input_to_predict Input String\n * @param {string[][]} input_examples Multiple ranges of values.\n * @param {string[][]} output_examples Multiple ranges of values.\n * @returns {string} The Formulabot result\n */\nfunction INFER(input_examples, output_examples, input_to_predict) {\n  // check if user is active\n  const activeState = localStorage.getItem(\"token\");\n  if (!activeState) {\n    return \"Please log in.\";\n  }\n\n  if (input_examples.length != output_examples.length) {\n    return \"input_examples and output_examples are different lengths\";\n  }\n\n  // loop inputs and outputs to assemble\n  var example_arr = [];\n  for (var i in input_examples) {\n    const input_val = input_examples[i];\n    const output_val = output_examples[i];\n    example_arr.push(input_val + \": \" + output_val);\n  }\n\n  example_arr = example_arr.join(\"\\\\n\")\n\n  // call API\n  const payload = {\n    input: input_to_predict,\n    \"reference-list\": example_arr,\n    platform: \"Excel Add-in\",\n    outputType: \"Infer - FF\",\n  };\n\n  try {\n    const result = callAPI(\"infer\", payload);\n    return result;\n  } catch (e) {\n    return \"No result found\";\n  }\n}\n\nCustomFunctions.associate(\"CLASSIFY\", CLASSIFY);\nCustomFunctions.associate(\"EXTRACT\", EXTRACT);\nCustomFunctions.associate(\"SENTIMENT\", SENTIMENT);\nCustomFunctions.associate(\"INFO\", INFO);\nCustomFunctions.associate(\"FREEFORM\", FREEFORM);\nCustomFunctions.associate(\"INFER\", INFER);"],"names":["CustomFunctions","associate","cell_to_classify_type","cell_to_classify","cell_to_classify_based_on","list_options","localStorage","getItem","payload","inputType","input","groupingType","groupings","flat","Infinity","join","platform","outputType","console","log","callAPI","cell_to_extract_info","info_to_extract","extract","e","cell_to_analyze_sentiment","options","sentiment","cell_to_get_info","info_request","info","input_any_info","input_examples","output_examples","input_to_predict","length","example_arr","i","input_val","output_val","push"],"sourceRoot":""}
